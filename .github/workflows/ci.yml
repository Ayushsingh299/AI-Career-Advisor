name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  FRONTEND_DIR: './frontend'
  BACKEND_DIR: './backend'

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    name: Backend Tests & Quality Checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm ci
    
    - name: TypeScript compilation check
      working-directory: ${{ env.BACKEND_DIR }}
      run: npx tsc --noEmit
    
    - name: Run ESLint
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run lint
    
    - name: Run tests with coverage
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run test:coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ${{ env.BACKEND_DIR }}/coverage
        flags: backend
        name: backend-coverage
    
    - name: Security audit
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm audit --audit-level moderate

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    name: Frontend Tests & Build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm ci
    
    - name: TypeScript compilation check
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npx tsc --noEmit
    
    - name: Run frontend tests
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run test -- --coverage --watchAll=false
    
    - name: Build frontend
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: ${{ env.FRONTEND_DIR }}/build

  # Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install backend dependencies
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm ci
    
    - name: Install frontend dependencies
      working-directory: ${{ env.FRONTEND_DIR }}
      run: npm ci
    
    - name: Start backend server
      working-directory: ${{ env.BACKEND_DIR }}
      run: |
        npm start &
        sleep 10
        curl --retry 5 --retry-delay 2 http://localhost:3001/health
    
    - name: Run API integration tests
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm run test:integration
    
    - name: Build and test frontend against backend
      working-directory: ${{ env.FRONTEND_DIR }}
      run: |
        REACT_APP_API_URL=http://localhost:3001 npm run build
        npm run test:e2e

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    name: Security & Vulnerability Scanning
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: |
        cd ${{ env.BACKEND_DIR }} && npm ci
        cd ${{ env.FRONTEND_DIR }} && npm ci
    
    - name: Run Prettier check
      run: |
        cd ${{ env.BACKEND_DIR }} && npx prettier --check "src/**/*.{ts,js,json}"
        cd ${{ env.FRONTEND_DIR }} && npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css}"
    
    - name: Check for TODO/FIXME comments
      run: |
        if grep -r "TODO\|FIXME" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" .; then
          echo "⚠️ Found TODO/FIXME comments. Please resolve before merging."
          exit 1
        fi

  # Performance Tests
  performance-test:
    runs-on: ubuntu-latest
    name: Performance & Load Testing
    needs: [backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      working-directory: ${{ env.BACKEND_DIR }}
      run: npm ci
    
    - name: Start backend server
      working-directory: ${{ env.BACKEND_DIR }}
      run: |
        npm start &
        sleep 10
    
    - name: Install Artillery
      run: npm install -g artillery
    
    - name: Run performance tests
      run: |
        echo "config:
          target: 'http://localhost:3001'
          phases:
            - duration: 60
              arrivalRate: 10
        scenarios:
          - name: 'Health Check Load Test'
            requests:
              - get:
                  url: '/health'
          - name: 'API Demo Load Test'
            requests:
              - get:
                  url: '/api/v1/recommendations/demo'
          - name: 'Career Recommendations Load Test'
            requests:
              - post:
                  url: '/api/v1/recommendations/career'
                  json:
                    skills: ['JavaScript', 'React']
                    experienceLevel: 'Intermediate'
        " > artillery-test.yml
        artillery run artillery-test.yml

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [backend-test, frontend-test, integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
    
    - name: Build frontend
      working-directory: ${{ env.FRONTEND_DIR }}
      run: |
        npm ci
        npm run build
    
    - name: Build backend
      working-directory: ${{ env.BACKEND_DIR }}
      run: |
        npm ci
        npm run build
    
    - name: Deploy to Firebase
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: firebase deploy --token "$FIREBASE_TOKEN"
    
    - name: Run smoke tests
      run: |
        sleep 30
        curl -f https://career-skills-advisor.web.app/api/health || exit 1
        curl -f https://career-skills-advisor.web.app || exit 1
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 AI Career Skills Advisor deployed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}